.PHONY: .FORCE rebuild-all check-all accept-all
.SUFFIXES:

IN := $(wildcard *.in)

default: check

# Rebuild all .out files
BUILD_TARGETS := $(IN:.in=.out)
build: ${BUILD_TARGETS}

# Check that .out files conform to .out.expect references
CHECK_TARGETS := $(BUILD_TARGETS:=.check)
check: ${CHECK_TARGETS}

# Show diffs of non-matching files
DIFF_TARGETS := $(BUILD_TARGETS:=.diff)
diff: ${DIFF_TARGETS}

# Update .expect.out files from .out files
ACCEPT_TARGETS := $(BUILD_TARGETS:=.expected)
accept: ${ACCEPT_TARGETS}

# Remove all .out files
clean:
	rm -f *.out

.FORCE:

%.in: .FORCE

# Feed .in to F* and record output as .out.  Output is passed through cleanup.py
# to ensure that the output is deterministic by pretty-printing JSON messages
# (otherwise the order of fields in JSON dictionaries might vary across runs)
%.out: %.in
	$(eval FST := $(firstword $(subst ., ,$<)))
	../../../bin/fstar.exe "${FST}.fst" --ide < "$<" | python2 cleanup.py "$@"

# Clean up and accept an existing ‘.out’ file (possibly generated by
# ‘fstar-write-transcript’, or possibly by ‘make build’) and save it as
# ‘.out.expected’.
%.out.expected: %.out
	python2 cleanup.py "$@" < "$<"

# Verify that a given output matches the corresponding input
%.out.check: %.out
	diff -u "$<.expected" "$<"
